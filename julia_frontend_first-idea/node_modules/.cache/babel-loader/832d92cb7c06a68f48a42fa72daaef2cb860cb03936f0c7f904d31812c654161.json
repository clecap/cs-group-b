{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// In einer echten Implementierung würden wir eine Bibliothek für Multipräzisionsarithmetik verwenden\n// wie z.B. big-integer oder bn.js\nexport default {\n  name: 'FFSDemo',\n  data() {\n    return {\n      k: 3,\n      // Anzahl der Zahlen\n      n: 143,\n      // Modulus (sollte das Produkt zweier großer Primzahlen sein)\n      setup: {\n        complete: false,\n        secretValues: [],\n        // s_i values\n        publicValues: [] // v_i values\n      },\n      rounds: [],\n      currentRound: {},\n      roundActive: false,\n      currentStep: null\n    };\n  },\n  methods: {\n    // Hilfsfunktionen für die modulare Arithmetik\n    modPow(base, exponent, modulus) {\n      if (modulus === 1) return 0;\n      let result = 1;\n      base = base % modulus;\n      while (exponent > 0) {\n        if (exponent % 2 === 1) {\n          result = result * base % modulus;\n        }\n        exponent = exponent >> 1;\n        base = base * base % modulus;\n      }\n      return result;\n    },\n    // Modulare Multiplikation\n    modMul(a, b, n) {\n      return a * b % n;\n    },\n    // Hilfsfunktion zum Generieren einer zufälligen Zahl im Bereich [1, max-1]\n    randomInt(max) {\n      return Math.floor(Math.random() * (max - 1)) + 1;\n    },\n    // Setup-Phase des Protokolls\n    generateValues() {\n      if (this.k < 1 || this.n < 10) {\n        alert('Bitte gültige Werte für k und n eingeben.');\n        return;\n      }\n      const secretValues = [];\n      const publicValues = [];\n\n      // In einer echten Implementierung würden wir hier Primzahlentests etc. durchführen\n      for (let i = 0; i < this.k; i++) {\n        // Wähle zufälligen geheimen Wert s_i\n        const s = this.randomInt(this.n);\n        secretValues.push(s);\n\n        // Berechne öffentlichen Wert v_i = s_i^2 mod n\n        const v = this.modPow(s, 2, this.n);\n        publicValues.push(v);\n      }\n      this.setup = {\n        complete: true,\n        secretValues,\n        publicValues\n      };\n      this.rounds = [];\n      this.roundActive = false;\n      this.currentStep = null;\n    },\n    // Starte eine neue Protokollrunde\n    startNewRound() {\n      this.roundActive = true;\n      this.currentStep = 'start';\n      this.currentRound = {};\n    },\n    // Schritt 1: Peggy erstellt Commitment\n    createCommitment() {\n      // Peggy wählt zufälliges r\n      const r = this.randomInt(this.n);\n\n      // Berechnet x = r^2 mod n\n      const x = this.modPow(r, 2, this.n);\n      this.currentRound = {\n        r: r,\n        // Geheimer Wert, den Peggy wählt\n        x: x // Commitment, das Peggy an Victor sendet\n      };\n      this.currentStep = 'commitment';\n    },\n    // Schritt 2: Victor sendet Challenge\n    createChallenge() {\n      // Victor wählt zufällig e aus {0, 1}\n      const e = Math.random() < 0.5 ? 0 : 1;\n\n      // Wenn e=1, wählt Victor auch j aus {1, 2, ..., k}\n      const j = e === 1 ? Math.floor(Math.random() * this.k) + 1 : null;\n      this.currentRound.e = e;\n      this.currentRound.j = j;\n      this.currentStep = 'challenge';\n    },\n    // Schritt 3: Peggy sendet Antwort\n    createResponse() {\n      if (this.currentRound.e === 0) {\n        // Wenn e=0, sendet Peggy y = r\n        this.currentRound.y = this.currentRound.r;\n      } else {\n        // Wenn e=1, sendet Peggy y = r * s_j mod n\n        const j = this.currentRound.j - 1; // Umrechnung auf 0-basierte Indizierung\n        const s_j = this.setup.secretValues[j];\n        this.currentRound.y = this.modMul(this.currentRound.r, s_j, this.n);\n      }\n      this.currentStep = 'response';\n    },\n    // Schritt 4: Victor verifiziert\n    verifyResponse() {\n      const y_squared = this.modPow(this.currentRound.y, 2, this.n);\n      let verification_right;\n      if (this.currentRound.e === 0) {\n        // Wenn e=0, prüfe ob y^2 mod n = x\n        verification_right = this.currentRound.x;\n      } else {\n        // Wenn e=1, prüfe ob y^2 mod n = x * v_j mod n\n        const j = this.currentRound.j - 1; // Umrechnung auf 0-basierte Indizierung\n        const v_j = this.setup.publicValues[j];\n        verification_right = this.modMul(this.currentRound.x, v_j, this.n);\n      }\n\n      // Speichere Verifikationsinformationen für die Anzeige\n      this.currentRound.verificationLeft = y_squared;\n      this.currentRound.verificationRight = verification_right;\n\n      // Prüfe ob die Gleichung erfüllt ist\n      this.currentRound.verified = y_squared === verification_right;\n      this.currentStep = 'verification';\n\n      // Füge die aktuelle Runde zur Historie hinzu\n      this.rounds.push({\n        ...this.currentRound\n      });\n\n      // Beende die aktuelle Runde\n      this.roundActive = false;\n    },\n    // Zurücksetzen des Demos\n    resetDemo() {\n      this.setup.complete = false;\n      this.rounds = [];\n      this.currentRound = {};\n      this.roundActive = false;\n      this.currentStep = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","k","n","setup","complete","secretValues","publicValues","rounds","currentRound","roundActive","currentStep","methods","modPow","base","exponent","modulus","result","modMul","a","b","randomInt","max","Math","floor","random","generateValues","alert","i","s","push","v","startNewRound","createCommitment","r","x","createChallenge","e","j","createResponse","y","s_j","verifyResponse","y_squared","verification_right","v_j","verificationLeft","verificationRight","verified","resetDemo"],"sources":["src/components/FFSDemo.vue"],"sourcesContent":["// Datei: src/components/FFSDemo.vue\n\n<template>\n  <div class=\"ffs-demo\">\n    <h1>Feige-Fiat-Shamir Protokoll Demonstrator</h1>\n    \n    <div class=\"setup-section\">\n      <h2>Setup</h2>\n      <div class=\"form-group\">\n        <label for=\"k-value\">Anzahl der Zahlen (k):</label>\n        <input id=\"k-value\" v-model.number=\"k\" type=\"number\" min=\"1\" max=\"10\" @change=\"resetDemo\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"n-value\">Modulus (n = p * q):</label>\n        <input id=\"n-value\" v-model.number=\"n\" type=\"number\" min=\"10\" @change=\"resetDemo\">\n        <button @click=\"generateValues\" class=\"btn\">Werte generieren</button>\n      </div>\n      \n      <div v-if=\"setup.complete\" class=\"values-display\">\n        <h3>Peggy's geheime Werte:</h3>\n        <div class=\"secret-values\">\n          <div v-for=\"(s, index) in setup.secretValues\" :key=\"'s'+index\" class=\"value-item\">\n            <span>s<sub>{{index+1}}</sub> = {{s}}</span>\n          </div>\n        </div>\n        \n        <h3>Öffentliche Werte:</h3>\n        <div class=\"public-values\">\n          <div v-for=\"(v, index) in setup.publicValues\" :key=\"'v'+index\" class=\"value-item\">\n            <span>v<sub>{{index+1}}</sub> = {{v}}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"protocol-section\" v-if=\"setup.complete\">\n      <h2>Protokoll-Ablauf</h2>\n      <div class=\"protocol-controls\">\n        <button @click=\"startNewRound\" :disabled=\"roundActive\" class=\"btn primary\">Neue Runde starten</button>\n        <button @click=\"resetDemo\" class=\"btn secondary\">Zurücksetzen</button>\n      </div>\n      \n      <div class=\"protocol-visualization\">\n        <div class=\"character peggy\" :class=\"{'active': currentStep === 'commitment' || currentStep === 'response'}\">\n          <img src=\"../assets/peggy.svg\" alt=\"Peggy\">\n          <div class=\"character-name\">Peggy (Beweiser)</div>\n          <div class=\"thought-bubble\" v-if=\"currentStep === 'commitment' || currentStep === 'response'\">\n            <p v-if=\"currentStep === 'commitment'\">\n              Ich wähle ein zufälliges r: <strong>{{currentRound.r}}</strong><br>\n              Berechne r² mod n: <strong>{{currentRound.x}}</strong>\n            </p>\n            <p v-if=\"currentStep === 'response' && currentRound.e === 0\">\n              Victor hat e=0 gewählt.<br>\n              Ich sende y = r: <strong>{{currentRound.y}}</strong>\n            </p>\n            <p v-if=\"currentStep === 'response' && currentRound.e === 1\">\n              Victor hat e=1 gewählt.<br>\n              Ich sende y = r·s<sub>j</sub> mod n: <strong>{{currentRound.y}}</strong>\n            </p>\n          </div>\n        </div>\n        \n        <div class=\"protocol-messages\">\n          <div class=\"message\" v-if=\"currentStep === 'commitment'\">\n            <div class=\"arrow right\"></div>\n            <div class=\"content\">\n              <strong>1. Commitment:</strong> x = {{currentRound.x}}\n            </div>\n          </div>\n          \n          <div class=\"message\" v-if=\"currentStep === 'challenge'\">\n            <div class=\"arrow left\"></div>\n            <div class=\"content\">\n              <strong>2. Challenge:</strong> e = {{currentRound.e}}\n              <span v-if=\"currentRound.j\">, j = {{currentRound.j}}</span>\n            </div>\n          </div>\n          \n          <div class=\"message\" v-if=\"currentStep === 'response'\">\n            <div class=\"arrow right\"></div>\n            <div class=\"content\">\n              <strong>3. Antwort:</strong> y = {{currentRound.y}}\n            </div>\n          </div>\n          \n          <div class=\"message\" v-if=\"currentStep === 'verification'\">\n            <div class=\"arrow none\"></div>\n            <div class=\"content verification\" :class=\"{'success': currentRound.verified, 'failure': !currentRound.verified}\">\n              <strong>4. Verifikation:</strong> \n              {{ currentRound.verified ? '✓ Bestätigt!' : '✗ Fehlgeschlagen!' }}\n              <div class=\"verification-equation\">\n                {{ currentRound.e === 0 ? 'y² mod n = ' : 'y² mod n = x · v_j mod n' }}\n                <br>\n                {{ currentRound.verificationLeft }} = {{ currentRound.verificationRight }}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"character victor\" :class=\"{'active': currentStep === 'challenge' || currentStep === 'verification'}\">\n          <img src=\"../assets/victor.svg\" alt=\"Victor\">\n          <div class=\"character-name\">Victor (Verifizierer)</div>\n          <div class=\"thought-bubble\" v-if=\"currentStep === 'challenge' || currentStep === 'verification'\">\n            <p v-if=\"currentStep === 'challenge'\">\n              Ich wähle zufällig:<br>\n              e = <strong>{{currentRound.e}}</strong>\n              <span v-if=\"currentRound.e === 1\">und j = <strong>{{currentRound.j}}</strong></span>\n            </p>\n            <p v-if=\"currentStep === 'verification'\">\n              Prüfe: {{ currentRound.e === 0 ? 'y² mod n = x' : 'y² mod n = x · v_j mod n' }}<br>\n              {{ currentRound.verified ? '✓ Stimmt!' : '✗ Stimmt nicht!' }}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"protocol-steps\" v-if=\"roundActive\">\n        <button \n          v-if=\"currentStep === 'start'\" \n          @click=\"createCommitment\" \n          class=\"btn step-btn\">\n          1. Peggy erstellt Commitment\n        </button>\n        \n        <button \n          v-if=\"currentStep === 'commitment'\" \n          @click=\"createChallenge\" \n          class=\"btn step-btn\">\n          2. Victor sendet Challenge\n        </button>\n        \n        <button \n          v-if=\"currentStep === 'challenge'\" \n          @click=\"createResponse\" \n          class=\"btn step-btn\">\n          3. Peggy sendet Antwort\n        </button>\n        \n        <button \n          v-if=\"currentStep === 'response'\" \n          @click=\"verifyResponse\" \n          class=\"btn step-btn\">\n          4. Victor verifiziert\n        </button>\n      </div>\n      \n      <div class=\"rounds-history\" v-if=\"rounds.length > 0\">\n        <h3>Bisherige Runden</h3>\n        <div class=\"rounds-table\">\n          <table>\n            <thead>\n              <tr>\n                <th>Runde</th>\n                <th>x</th>\n                <th>e</th>\n                <th>j</th>\n                <th>y</th>\n                <th>Ergebnis</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(round, index) in rounds\" :key=\"index\">\n                <td>{{index + 1}}</td>\n                <td>{{round.x}}</td>\n                <td>{{round.e}}</td>\n                <td>{{round.e === 1 ? round.j : '-'}}</td>\n                <td>{{round.y}}</td>\n                <td :class=\"{'success': round.verified, 'failure': round.verified === false}\">\n                  {{round.verified === undefined ? '-' : (round.verified ? '✓' : '✗')}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        \n        <div class=\"security-info\">\n          <p>\n            <strong>Sicherheit:</strong> Nach {{rounds.filter(r => r.verified !== undefined).length}} Runden\n            ist die Wahrscheinlichkeit, dass Peggy schummelt, höchstens \n            (1/2)<sup>{{rounds.filter(r => r.verified).length}}</sup> = \n            {{Math.pow(0.5, rounds.filter(r => r.verified).length).toFixed(8)}}\n          </p>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"explanation\">\n      <h2>Erklärung des Feige-Fiat-Shamir Protokolls</h2>\n      <div class=\"explanation-content\">\n        <h3>Ziel</h3>\n        <p>Peggy will Victor beweisen, dass sie die Quadratwurzeln von k Zahlen modulo n kennt, ohne diese preiszugeben.</p>\n        \n        <h3>Setup</h3>\n        <ol>\n          <li>Peggy wählt geheime Werte s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></li>\n          <li>Peggy berechnet öffentliche Werte v<sub>i</sub> = s<sub>i</sub>² mod n für i = 1, 2, ..., k</li>\n          <li>Die öffentlichen Werte v<sub>i</sub> werden publiziert</li>\n        </ol>\n        \n        <h3>Protokoll (für jede Runde)</h3>\n        <ol>\n          <li><strong>Commitment:</strong> Peggy wählt zufälliges r und sendet x = r² mod n an Victor</li>\n          <li><strong>Challenge:</strong> Victor wählt zufällig e ∈ {0, 1} und bei e=1 auch j ∈ {1, 2, ..., k}</li>\n          <li><strong>Antwort:</strong> Peggy sendet y = r (falls e=0) oder y = r·s<sub>j</sub> mod n (falls e=1)</li>\n          <li><strong>Verifikation:</strong> Victor prüft, ob y² mod n = x (falls e=0) oder y² mod n = x·v<sub>j</sub> mod n (falls e=1)</li>\n        </ol>\n        \n        <h3>Sicherheit</h3>\n        <p>\n          Nach t erfolgreichen Runden ist die Wahrscheinlichkeit, dass Peggy schummelt, höchstens (1/2)<sup>t</sup>.\n          Das Protokoll ist \"zero-knowledge\", da Victor keine Information über die geheimen Werte s<sub>i</sub> erhält.\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// In einer echten Implementierung würden wir eine Bibliothek für Multipräzisionsarithmetik verwenden\n// wie z.B. big-integer oder bn.js\nexport default {\n  name: 'FFSDemo',\n  data() {\n    return {\n      k: 3, // Anzahl der Zahlen\n      n: 143, // Modulus (sollte das Produkt zweier großer Primzahlen sein)\n      setup: {\n        complete: false,\n        secretValues: [], // s_i values\n        publicValues: []  // v_i values\n      },\n      rounds: [],\n      currentRound: {},\n      roundActive: false,\n      currentStep: null\n    };\n  },\n  methods: {\n    // Hilfsfunktionen für die modulare Arithmetik\n    modPow(base, exponent, modulus) {\n      if (modulus === 1) return 0;\n      let result = 1;\n      base = base % modulus;\n      while (exponent > 0) {\n        if (exponent % 2 === 1) {\n          result = (result * base) % modulus;\n        }\n        exponent = exponent >> 1;\n        base = (base * base) % modulus;\n      }\n      return result;\n    },\n    \n    // Modulare Multiplikation\n    modMul(a, b, n) {\n      return (a * b) % n;\n    },\n    \n    // Hilfsfunktion zum Generieren einer zufälligen Zahl im Bereich [1, max-1]\n    randomInt(max) {\n      return Math.floor(Math.random() * (max - 1)) + 1;\n    },\n    \n    // Setup-Phase des Protokolls\n    generateValues() {\n      if (this.k < 1 || this.n < 10) {\n        alert('Bitte gültige Werte für k und n eingeben.');\n        return;\n      }\n      \n      const secretValues = [];\n      const publicValues = [];\n      \n      // In einer echten Implementierung würden wir hier Primzahlentests etc. durchführen\n      for (let i = 0; i < this.k; i++) {\n        // Wähle zufälligen geheimen Wert s_i\n        const s = this.randomInt(this.n);\n        secretValues.push(s);\n        \n        // Berechne öffentlichen Wert v_i = s_i^2 mod n\n        const v = this.modPow(s, 2, this.n);\n        publicValues.push(v);\n      }\n      \n      this.setup = {\n        complete: true,\n        secretValues,\n        publicValues\n      };\n      \n      this.rounds = [];\n      this.roundActive = false;\n      this.currentStep = null;\n    },\n    \n    // Starte eine neue Protokollrunde\n    startNewRound() {\n      this.roundActive = true;\n      this.currentStep = 'start';\n      this.currentRound = {};\n    },\n    \n    // Schritt 1: Peggy erstellt Commitment\n    createCommitment() {\n      // Peggy wählt zufälliges r\n      const r = this.randomInt(this.n);\n      \n      // Berechnet x = r^2 mod n\n      const x = this.modPow(r, 2, this.n);\n      \n      this.currentRound = {\n        r: r,  // Geheimer Wert, den Peggy wählt\n        x: x   // Commitment, das Peggy an Victor sendet\n      };\n      \n      this.currentStep = 'commitment';\n    },\n    \n    // Schritt 2: Victor sendet Challenge\n    createChallenge() {\n      // Victor wählt zufällig e aus {0, 1}\n      const e = Math.random() < 0.5 ? 0 : 1;\n      \n      // Wenn e=1, wählt Victor auch j aus {1, 2, ..., k}\n      const j = e === 1 ? Math.floor(Math.random() * this.k) + 1 : null;\n      \n      this.currentRound.e = e;\n      this.currentRound.j = j;\n      \n      this.currentStep = 'challenge';\n    },\n    \n    // Schritt 3: Peggy sendet Antwort\n    createResponse() {\n      if (this.currentRound.e === 0) {\n        // Wenn e=0, sendet Peggy y = r\n        this.currentRound.y = this.currentRound.r;\n      } else {\n        // Wenn e=1, sendet Peggy y = r * s_j mod n\n        const j = this.currentRound.j - 1; // Umrechnung auf 0-basierte Indizierung\n        const s_j = this.setup.secretValues[j];\n        this.currentRound.y = this.modMul(this.currentRound.r, s_j, this.n);\n      }\n      \n      this.currentStep = 'response';\n    },\n    \n    // Schritt 4: Victor verifiziert\n    verifyResponse() {\n      const y_squared = this.modPow(this.currentRound.y, 2, this.n);\n      let verification_right;\n      \n      if (this.currentRound.e === 0) {\n        // Wenn e=0, prüfe ob y^2 mod n = x\n        verification_right = this.currentRound.x;\n      } else {\n        // Wenn e=1, prüfe ob y^2 mod n = x * v_j mod n\n        const j = this.currentRound.j - 1; // Umrechnung auf 0-basierte Indizierung\n        const v_j = this.setup.publicValues[j];\n        verification_right = this.modMul(this.currentRound.x, v_j, this.n);\n      }\n      \n      // Speichere Verifikationsinformationen für die Anzeige\n      this.currentRound.verificationLeft = y_squared;\n      this.currentRound.verificationRight = verification_right;\n      \n      // Prüfe ob die Gleichung erfüllt ist\n      this.currentRound.verified = y_squared === verification_right;\n      \n      this.currentStep = 'verification';\n      \n      // Füge die aktuelle Runde zur Historie hinzu\n      this.rounds.push({...this.currentRound});\n      \n      // Beende die aktuelle Runde\n      this.roundActive = false;\n    },\n    \n    // Zurücksetzen des Demos\n    resetDemo() {\n      this.setup.complete = false;\n      this.rounds = [];\n      this.currentRound = {};\n      this.roundActive = false;\n      this.currentStep = null;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.ffs-demo {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 30px;\n}\n\nh2 {\n  color: #2c3e50;\n  margin-top: 30px;\n  border-bottom: 2px solid #eee;\n  padding-bottom: 10px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.form-group label {\n  width: 200px;\n  font-weight: bold;\n}\n\ninput[type=\"number\"] {\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  width: 100px;\n  margin-right: 10px;\n}\n\n.btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.btn:hover {\n  background-color: #45a049;\n}\n\n.btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.btn.primary {\n  background-color: #2196F3;\n}\n\n.btn.primary:hover {\n  background-color: #0b7dda;\n}\n\n.btn.secondary {\n  background-color: #f44336;\n}\n\n.btn.secondary:hover {\n  background-color: #da190b;\n}\n\n.btn.step-btn {\n  display: block;\n  margin: 15px auto;\n  padding: 10px 20px;\n  font-size: 16px;\n}\n\n.values-display {\n  background-color: #f9f9f9;\n  padding: 15px;\n  border-radius: 4px;\n  margin-top: 20px;\n}\n\n.secret-values, .public-values {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 15px;\n}\n\n.value-item {\n  background-color: #e9e9e9;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-family: monospace;\n  font-size: 16px;\n}\n\n.protocol-visualization {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 30px 0;\n  position: relative;\n  min-height: 200px;\n}\n\n.character {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 150px;\n  position: relative;\n}\n\n.character img {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  border: 3px solid #ddd;\n  padding: 10px;\n  background-color: #f5f5f5;\n  transition: border-color 0.3s;\n}\n\n.character.active img {\n  border-color: #4CAF50;\n}\n\n.character-name {\n  margin-top: 10px;\n  font-weight: bold;\n}\n\n.thought-bubble {\n  position: absolute;\n  top: -100px;\n  background-color: #fff;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  padding: 10px;\n  width: 200px;\n  min-height: 80px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.thought-bubble:after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #fff;\n}\n\n.protocol-messages {\n  flex-grow: 1;\n  padding: 0 20px;\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message {\n  display: flex;\n  align-items: center;\n  background-color: #f1f1f1;\n  padding: 10px 15px;\n  border-radius: 4px;\n  position: relative;\n}\n\n.message .content {\n  width: 100%;\n}\n\n.arrow {\n  position: absolute;\n  width: 30px;\n  height: 2px;\n  background-color: #555;\n}\n\n.arrow.right {\n  left: -30px;\n}\n\n.arrow.right:after {\n  content: '';\n  position: absolute;\n  right: 0;\n  top: -4px;\n  border-left: 8px solid #555;\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.arrow.left {\n  right: -30px;\n}\n\n.arrow.left:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: -4px;\n  border-right: 8px solid #555;\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.arrow.none {\n  display: none;\n}\n\n.verification {\n  padding: 10px;\n  border-radius: 4px;\n}\n\n.verification.success {\n  background-color: #e8f5e9;\n  border-left: 4px solid #4CAF50;\n}\n\n.verification.failure {\n  background-color: #ffebee;\n  border-left: 4px solid #f44336;\n}\n\n.verification-equation {\n  font-family: monospace;\n  margin-top: 8px;\n  font-size: 14px;\n}\n\n.rounds-history {\n  margin-top: 40px;\n}\n\n.rounds-table {\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px 12px;\n  text-align: center;\n}\n\nth {\n  background-color: #f2f2f2;\n  font-weight: bold;\n}\n\ntd.success {\n  background-color: #e8f5e9;\n  color: #4CAF50;\n  font-weight: bold;\n}\n\ntd.failure {\n  background-color: #ffebee;\n  color: #f44336;\n  font-weight: bold;\n}\n\n.security-info {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #e3f2fd;\n  border-radius: 4px;\n}\n\n.explanation {\n  margin-top: 50px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n}\n\n.explanation-content {\n  margin-top: 15px;\n}\n\n.explanation h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n  color: #2c3e50;\n}\n\n.explanation ol {\n  padding-left: 20px;\n}\n\n.explanation li {\n  margin-bottom: 8px;\n}\n\n.protocol-controls {\n  display: flex;\n  gap: 10px;\n  margin-top: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}