{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// In a real implementation, we would use a library for multi-precision arithmetic\n// such as big-integer or bn.js\nexport default {\n  name: 'FFSDemo',\n  data() {\n    return {\n      k: 3,\n      // Number of values\n      n: 143,\n      // Modulus (should be the product of two large prime numbers)\n      setup: {\n        complete: false,\n        secretValues: [],\n        // s_i values\n        publicValues: [] // v_i values\n      },\n      rounds: [],\n      currentRound: {},\n      roundActive: false,\n      currentStep: null\n    };\n  },\n  // Lifecycle hook to set the document background color when component is created\n  created() {\n    document.documentElement.style.backgroundColor = '#121212';\n    document.body.style.backgroundColor = '#121212';\n  },\n  // Ensure background color resets if the component is removed\n  beforeDestroy() {\n    document.documentElement.style.backgroundColor = '';\n    document.body.style.backgroundColor = '';\n  },\n  methods: {\n    // Helper functions for modular arithmetic\n\n    // Modular exponentiation (base^exponent mod modulus)\n    modPow(base, exponent, modulus) {\n      if (modulus === 1) return 0;\n      let result = 1;\n      base = base % modulus;\n      while (exponent > 0) {\n        if (exponent % 2 === 1) {\n          result = result * base % modulus;\n        }\n        exponent = exponent >> 1; // Bit shift right (divide by 2)\n        base = base * base % modulus;\n      }\n      return result;\n    },\n    // Modular multiplication (a * b mod n)\n    modMul(a, b, n) {\n      return a * b % n;\n    },\n    // Helper function to generate a random integer in the range [1, max-1]\n    randomInt(max) {\n      return Math.floor(Math.random() * (max - 1)) + 1;\n    },\n    // Setup phase of the protocol\n    generateValues() {\n      if (this.k < 1 || this.n < 10) {\n        alert('Please enter valid values for k and n.');\n        return;\n      }\n      const secretValues = [];\n      const publicValues = [];\n\n      // In a real implementation, we would perform primality tests here\n      for (let i = 0; i < this.k; i++) {\n        // Choose random secret value s_i\n        const s = this.randomInt(this.n);\n        secretValues.push(s);\n\n        // Calculate public value v_i = s_i^2 mod n\n        const v = this.modPow(s, 2, this.n);\n        publicValues.push(v);\n      }\n      this.setup = {\n        complete: true,\n        secretValues,\n        publicValues\n      };\n      this.rounds = [];\n      this.roundActive = false;\n      this.currentStep = null;\n    },\n    // Start a new protocol round\n    startNewRound() {\n      this.roundActive = true;\n      this.currentStep = 'start';\n      this.currentRound = {};\n    },\n    // Step 1: Peggy creates commitment\n    createCommitment() {\n      // Peggy chooses random r\n      const r = this.randomInt(this.n);\n\n      // Calculate x = r^2 mod n\n      const x = this.modPow(r, 2, this.n);\n      this.currentRound = {\n        r: r,\n        // Secret value that Peggy chooses\n        x: x // Commitment that Peggy sends to Victor\n      };\n      this.currentStep = 'commitment';\n    },\n    // Step 2: Victor sends challenge\n    createChallenge() {\n      // Victor randomly chooses e from {0, 1}\n      const e = Math.random() < 0.5 ? 0 : 1;\n\n      // If e=1, Victor also chooses j from {1, 2, ..., k}\n      const j = e === 1 ? Math.floor(Math.random() * this.k) + 1 : null;\n      this.currentRound.e = e;\n      this.currentRound.j = j;\n      this.currentStep = 'challenge';\n    },\n    // Step 3: Peggy sends response\n    createResponse() {\n      if (this.currentRound.e === 0) {\n        // If e=0, Peggy sends y = r\n        this.currentRound.y = this.currentRound.r;\n      } else {\n        // If e=1, Peggy sends y = r * s_j mod n\n        const j = this.currentRound.j - 1; // Convert to 0-based indexing\n        const s_j = this.setup.secretValues[j];\n        this.currentRound.y = this.modMul(this.currentRound.r, s_j, this.n);\n      }\n      this.currentStep = 'response';\n    },\n    // Step 4: Victor verifies\n    verifyResponse() {\n      const y_squared = this.modPow(this.currentRound.y, 2, this.n);\n      let verification_right;\n      if (this.currentRound.e === 0) {\n        // If e=0, check if y^2 mod n = x\n        verification_right = this.currentRound.x;\n      } else {\n        // If e=1, check if y^2 mod n = x * v_j mod n\n        const j = this.currentRound.j - 1; // Convert to 0-based indexing\n        const v_j = this.setup.publicValues[j];\n        verification_right = this.modMul(this.currentRound.x, v_j, this.n);\n      }\n\n      // Store verification information for display\n      this.currentRound.verificationLeft = y_squared;\n      this.currentRound.verificationRight = verification_right;\n\n      // Check if the equation is satisfied\n      this.currentRound.verified = y_squared === verification_right;\n      this.currentStep = 'verification';\n\n      // Add the current round to the history\n      this.rounds.push({\n        ...this.currentRound\n      });\n\n      // End the current round\n      this.roundActive = false;\n    },\n    // Reset the demo\n    resetDemo() {\n      this.setup.complete = false;\n      this.rounds = [];\n      this.currentRound = {};\n      this.roundActive = false;\n      this.currentStep = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","k","n","setup","complete","secretValues","publicValues","rounds","currentRound","roundActive","currentStep","created","document","documentElement","style","backgroundColor","body","beforeDestroy","methods","modPow","base","exponent","modulus","result","modMul","a","b","randomInt","max","Math","floor","random","generateValues","alert","i","s","push","v","startNewRound","createCommitment","r","x","createChallenge","e","j","createResponse","y","s_j","verifyResponse","y_squared","verification_right","v_j","verificationLeft","verificationRight","verified","resetDemo"],"sources":["src/components/FFSDemo.vue"],"sourcesContent":["// File: src/components/FFSDemo.vue\n\n<template>\n  <!-- Main container for the demo application with dark theme -->\n  <div class=\"ffs-demo dark-theme\">\n    <div class=\"content-container\">\n      <h1>Feige-Fiat-Shamir Protocol Demonstrator</h1>\n      \n      <!-- Setup section with modern card design -->\n      <div class=\"card setup-section\">\n        <h2>Setup</h2>\n        <div class=\"form-group\">\n          <label for=\"k-value\">Number of values (k):</label>\n          <input id=\"k-value\" v-model.number=\"k\" type=\"number\" min=\"1\" max=\"10\" @change=\"resetDemo\" class=\"input-field\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"n-value\">Modulus (n = p * q):</label>\n          <input id=\"n-value\" v-model.number=\"n\" type=\"number\" min=\"10\" @change=\"resetDemo\" class=\"input-field\">\n          <button @click=\"generateValues\" class=\"btn primary\">Generate values</button>\n        </div>\n        \n        <!-- Display of the generated values with modern styling -->\n        <div v-if=\"setup.complete\" class=\"values-display\">\n          <div class=\"values-grid\">\n            <div class=\"values-column\">\n              <h3>Peggy's secret values:</h3>\n              <div class=\"secret-values\">\n                <div v-for=\"(s, index) in setup.secretValues\" :key=\"'s'+index\" class=\"value-item\">\n                  <span>s<sub>{{index+1}}</sub> = {{s}}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"values-column\">\n              <h3>Public values:</h3>\n              <div class=\"public-values\">\n                <div v-for=\"(v, index) in setup.publicValues\" :key=\"'v'+index\" class=\"value-item\">\n                  <span>v<sub>{{index+1}}</sub> = {{v}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Protocol execution section with modern card design -->\n      <div class=\"card protocol-section\" v-if=\"setup.complete\">\n        <h2>Protocol Workflow</h2>\n        <div class=\"protocol-controls\">\n          <button @click=\"startNewRound\" :disabled=\"roundActive\" class=\"btn primary\">\n            <i class=\"icon\">▶</i> Start New Round\n          </button>\n          <button @click=\"resetDemo\" class=\"btn secondary\">\n            <i class=\"icon\">↺</i> Reset\n          </button>\n        </div>\n        \n        <!-- Visual representation with modern styling -->\n        <div class=\"protocol-visualization\">\n          <!-- Peggy character with modern styling -->\n          <div class=\"character peggy\" :class=\"{'active': currentStep === 'commitment' || currentStep === 'response'}\">\n            <div class=\"avatar\">\n              <img src=\"@/assets/peggy.png\" alt=\"Peggy\">\n            </div>\n            <div class=\"character-name\">Peggy (Prover)</div>\n            <!-- Thought bubble with modern styling -->\n            <div class=\"thought-bubble\" v-if=\"currentStep === 'commitment' || currentStep === 'response'\">\n              <p v-if=\"currentStep === 'commitment'\">\n                I choose a random r: <strong>{{currentRound.r}}</strong><br>\n                Calculate r² mod n: <strong>{{currentRound.x}}</strong>\n              </p>\n              <p v-if=\"currentStep === 'response' && currentRound.e === 0\">\n                Victor chose e=0.<br>\n                I send y = r: <strong>{{currentRound.y}}</strong>\n              </p>\n              <p v-if=\"currentStep === 'response' && currentRound.e === 1\">\n                Victor chose e=1.<br>\n                I send y = r·s<sub>j</sub> mod n: <strong>{{currentRound.y}}</strong>\n              </p>\n            </div>\n          </div>\n          \n          <!-- Message exchange area with modern design -->\n          <div class=\"protocol-messages\">\n            <!-- Step 1: Commitment message -->\n            <div class=\"message\" v-if=\"currentStep === 'commitment'\">\n              <div class=\"arrow right\"></div>\n              <div class=\"content\">\n                <strong>1. Commitment:</strong> x = {{currentRound.x}}\n              </div>\n            </div>\n            \n            <!-- Step 2: Challenge message -->\n            <div class=\"message\" v-if=\"currentStep === 'challenge'\">\n              <div class=\"arrow left\"></div>\n              <div class=\"content\">\n                <strong>2. Challenge:</strong> e = {{currentRound.e}}\n                <span v-if=\"currentRound.j\">, j = {{currentRound.j}}</span>\n              </div>\n            </div>\n            \n            <!-- Step 3: Response message -->\n            <div class=\"message\" v-if=\"currentStep === 'response'\">\n              <div class=\"arrow right\"></div>\n              <div class=\"content\">\n                <strong>3. Response:</strong> y = {{currentRound.y}}\n              </div>\n            </div>\n            \n            <!-- Step 4: Verification result with modern styling -->\n            <div class=\"message\" v-if=\"currentStep === 'verification'\">\n              <div class=\"arrow none\"></div>\n              <div class=\"content verification\" :class=\"{'success': currentRound.verified, 'failure': !currentRound.verified}\">\n                <strong>4. Verification:</strong> \n                <span class=\"verification-icon\">{{ currentRound.verified ? '✓' : '✗' }}</span>\n                {{ currentRound.verified ? 'Confirmed!' : 'Failed!' }}\n                <div class=\"verification-equation\">\n                  {{ currentRound.e === 0 ? 'y² mod n = ' : 'y² mod n = x · v_j mod n' }}\n                  <br>\n                  {{ currentRound.verificationLeft }} = {{ currentRound.verificationRight }}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Victor character with modern styling -->\n          <div class=\"character victor\" :class=\"{'active': currentStep === 'challenge' || currentStep === 'verification'}\">\n            <div class=\"avatar\">\n              <img src=\"../assets/victor.png\" alt=\"Victor\">\n            </div>\n            <div class=\"character-name\">Victor (Verifier)</div>\n            <!-- Thought bubble with modern styling -->\n            <div class=\"thought-bubble\" :class=\"{'verification-thought': currentStep === 'verification'}\" v-if=\"currentStep === 'challenge' || currentStep === 'verification'\">\n              <p v-if=\"currentStep === 'challenge'\">\n                I randomly choose:<br>\n                e = <strong>{{currentRound.e}}</strong>\n                <span v-if=\"currentRound.e === 1\">and j = <strong>{{currentRound.j}}</strong></span>\n              </p>\n              <p v-if=\"currentStep === 'verification'\">\n                Checking: {{ currentRound.e === 0 ? 'y² mod n = x' : 'y² mod n = x · v_j mod n' }}<br>\n                {{ currentRound.verified ? '✓ Correct!' : '✗ Incorrect!' }}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Protocol step buttons with modern design -->\n        <div class=\"protocol-steps\" v-if=\"roundActive\">\n          <button \n            v-if=\"currentStep === 'start'\" \n            @click=\"createCommitment\" \n            class=\"btn step-btn\">\n            1. Peggy creates Commitment\n          </button>\n          \n          <button \n            v-if=\"currentStep === 'commitment'\" \n            @click=\"createChallenge\" \n            class=\"btn step-btn\">\n            2. Victor sends Challenge\n          </button>\n          \n          <button \n            v-if=\"currentStep === 'challenge'\" \n            @click=\"createResponse\" \n            class=\"btn step-btn\">\n            3. Peggy sends Response\n          </button>\n          \n          <button \n            v-if=\"currentStep === 'response'\" \n            @click=\"verifyResponse\" \n            class=\"btn step-btn\">\n            4. Victor verifies\n          </button>\n        </div>\n        \n        <!-- History of past rounds with modern table design -->\n        <div class=\"rounds-history\" v-if=\"rounds.length > 0\">\n          <h3>Previous Rounds</h3>\n          <div class=\"rounds-table\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Round</th>\n                  <th>x</th>\n                  <th>e</th>\n                  <th>j</th>\n                  <th>y</th>\n                  <th>Result</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(round, index) in rounds\" :key=\"index\">\n                  <td>{{index + 1}}</td>\n                  <td>{{round.x}}</td>\n                  <td>{{round.e}}</td>\n                  <td>{{round.e === 1 ? round.j : '-'}}</td>\n                  <td>{{round.y}}</td>\n                  <td :class=\"{'success': round.verified, 'failure': round.verified === false}\">\n                    <span class=\"result-icon\">{{round.verified === undefined ? '-' : (round.verified ? '✓' : '✗')}}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          \n          <!-- Security information with modern card design -->\n          <div class=\"security-info\">\n            <p>\n              <strong>Security:</strong> After {{rounds.filter(r => r.verified !== undefined).length}} rounds,\n              the probability that Peggy is cheating is at most \n              (1/2)<sup>{{rounds.filter(r => r.verified).length}}</sup> = \n              {{Math.pow(0.5, rounds.filter(r => r.verified).length).toFixed(8)}}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Explanation section with modern card design -->\n      <div class=\"card explanation\">\n        <h2>Explanation of the Feige-Fiat-Shamir Protocol</h2>\n        <div class=\"explanation-content\">\n          <div class=\"explanation-section\">\n            <h3>Goal</h3>\n            <p>Peggy wants to prove to Victor that she knows the square roots of k numbers modulo n, without revealing these values.</p>\n          </div>\n          \n          <div class=\"explanation-section\">\n            <h3>Setup</h3>\n            <ol>\n              <li>Peggy chooses secret values s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></li>\n              <li>Peggy calculates public values v<sub>i</sub> = s<sub>i</sub>² mod n for i = 1, 2, ..., k</li>\n              <li>The public values v<sub>i</sub> are published</li>\n            </ol>\n          </div>\n          \n          <div class=\"explanation-section\">\n            <h3>Protocol (for each round)</h3>\n            <ol>\n              <li><strong>Commitment:</strong> Peggy chooses random r and sends x = r² mod n to Victor</li>\n              <li><strong>Challenge:</strong> Victor randomly chooses e ∈ {0, 1} and if e=1, also j ∈ {1, 2, ..., k}</li>\n              <li><strong>Response:</strong> Peggy sends y = r (if e=0) or y = r·s<sub>j</sub> mod n (if e=1)</li>\n              <li><strong>Verification:</strong> Victor checks if y² mod n = x (if e=0) or y² mod n = x·v<sub>j</sub> mod n (if e=1)</li>\n            </ol>\n          </div>\n          \n          <div class=\"explanation-section\">\n            <h3>Security</h3>\n            <p>\n              After t successful rounds, the probability that Peggy is cheating is at most (1/2)<sup>t</sup>.\n              The protocol is \"zero-knowledge\" because Victor gains no information about the secret values s<sub>i</sub>.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// In a real implementation, we would use a library for multi-precision arithmetic\n// such as big-integer or bn.js\nexport default {\n  name: 'FFSDemo',\n  data() {\n    return {\n      k: 3, // Number of values\n      n: 143, // Modulus (should be the product of two large prime numbers)\n      setup: {\n        complete: false,\n        secretValues: [], // s_i values\n        publicValues: []  // v_i values\n      },\n      rounds: [],\n      currentRound: {},\n      roundActive: false,\n      currentStep: null\n    };\n  },\n  // Lifecycle hook to set the document background color when component is created\n  created() {\n    document.documentElement.style.backgroundColor = '#121212';\n    document.body.style.backgroundColor = '#121212';\n  },\n  // Ensure background color resets if the component is removed\n  beforeDestroy() {\n    document.documentElement.style.backgroundColor = '';\n    document.body.style.backgroundColor = '';\n  },\n  methods: {\n    // Helper functions for modular arithmetic\n    \n    // Modular exponentiation (base^exponent mod modulus)\n    modPow(base, exponent, modulus) {\n      if (modulus === 1) return 0;\n      let result = 1;\n      base = base % modulus;\n      while (exponent > 0) {\n        if (exponent % 2 === 1) {\n          result = (result * base) % modulus;\n        }\n        exponent = exponent >> 1; // Bit shift right (divide by 2)\n        base = (base * base) % modulus;\n      }\n      return result;\n    },\n    \n    // Modular multiplication (a * b mod n)\n    modMul(a, b, n) {\n      return (a * b) % n;\n    },\n    \n    // Helper function to generate a random integer in the range [1, max-1]\n    randomInt(max) {\n      return Math.floor(Math.random() * (max - 1)) + 1;\n    },\n    \n    // Setup phase of the protocol\n    generateValues() {\n      if (this.k < 1 || this.n < 10) {\n        alert('Please enter valid values for k and n.');\n        return;\n      }\n      \n      const secretValues = [];\n      const publicValues = [];\n      \n      // In a real implementation, we would perform primality tests here\n      for (let i = 0; i < this.k; i++) {\n        // Choose random secret value s_i\n        const s = this.randomInt(this.n);\n        secretValues.push(s);\n        \n        // Calculate public value v_i = s_i^2 mod n\n        const v = this.modPow(s, 2, this.n);\n        publicValues.push(v);\n      }\n      \n      this.setup = {\n        complete: true,\n        secretValues,\n        publicValues\n      };\n      \n      this.rounds = [];\n      this.roundActive = false;\n      this.currentStep = null;\n    },\n    \n    // Start a new protocol round\n    startNewRound() {\n      this.roundActive = true;\n      this.currentStep = 'start';\n      this.currentRound = {};\n    },\n    \n    // Step 1: Peggy creates commitment\n    createCommitment() {\n      // Peggy chooses random r\n      const r = this.randomInt(this.n);\n      \n      // Calculate x = r^2 mod n\n      const x = this.modPow(r, 2, this.n);\n      \n      this.currentRound = {\n        r: r,  // Secret value that Peggy chooses\n        x: x   // Commitment that Peggy sends to Victor\n      };\n      \n      this.currentStep = 'commitment';\n    },\n    \n    // Step 2: Victor sends challenge\n    createChallenge() {\n      // Victor randomly chooses e from {0, 1}\n      const e = Math.random() < 0.5 ? 0 : 1;\n      \n      // If e=1, Victor also chooses j from {1, 2, ..., k}\n      const j = e === 1 ? Math.floor(Math.random() * this.k) + 1 : null;\n      \n      this.currentRound.e = e;\n      this.currentRound.j = j;\n      \n      this.currentStep = 'challenge';\n    },\n    \n    // Step 3: Peggy sends response\n    createResponse() {\n      if (this.currentRound.e === 0) {\n        // If e=0, Peggy sends y = r\n        this.currentRound.y = this.currentRound.r;\n      } else {\n        // If e=1, Peggy sends y = r * s_j mod n\n        const j = this.currentRound.j - 1; // Convert to 0-based indexing\n        const s_j = this.setup.secretValues[j];\n        this.currentRound.y = this.modMul(this.currentRound.r, s_j, this.n);\n      }\n      \n      this.currentStep = 'response';\n    },\n    \n    // Step 4: Victor verifies\n    verifyResponse() {\n      const y_squared = this.modPow(this.currentRound.y, 2, this.n);\n      let verification_right;\n      \n      if (this.currentRound.e === 0) {\n        // If e=0, check if y^2 mod n = x\n        verification_right = this.currentRound.x;\n      } else {\n        // If e=1, check if y^2 mod n = x * v_j mod n\n        const j = this.currentRound.j - 1; // Convert to 0-based indexing\n        const v_j = this.setup.publicValues[j];\n        verification_right = this.modMul(this.currentRound.x, v_j, this.n);\n      }\n      \n      // Store verification information for display\n      this.currentRound.verificationLeft = y_squared;\n      this.currentRound.verificationRight = verification_right;\n      \n      // Check if the equation is satisfied\n      this.currentRound.verified = y_squared === verification_right;\n      \n      this.currentStep = 'verification';\n      \n      // Add the current round to the history\n      this.rounds.push({...this.currentRound});\n      \n      // End the current round\n      this.roundActive = false;\n    },\n    \n    // Reset the demo\n    resetDemo() {\n      this.setup.complete = false;\n      this.rounds = [];\n      this.currentRound = {};\n      this.roundActive = false;\n      this.currentStep = null;\n    }\n  }\n};\n</script>\n\n<style>\n/* Global styles to ensure full-width display */\nhtml, body {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #121212;\n  overflow-x: hidden;\n}\n\n/* Modern Dark Theme CSS styling for the demo interface */\n.ffs-demo {\n  width: 100%;\n  min-height: 100vh;\n  margin: 0;\n  padding: 20px;\n  box-sizing: border-box;\n  font-family: 'Inter', 'Roboto', 'Segoe UI', sans-serif;\n  color: #e0e0e0;\n  background-color: #121212;\n  line-height: 1.6;\n}\n\n.content-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.dark-theme {\n  --primary-color: #7e57c2;\n  --primary-hover: #9575cd;\n  --secondary-color: #f44336;\n  --secondary-hover: #e57373;\n  --surface-color: #1e1e1e;\n  --card-color: #2d2d2d;\n  --success-color: #66bb6a;\n  --error-color: #ef5350;\n  --border-color: #444444;\n  --text-primary: #ffffff;\n  --text-secondary: #b0b0b0;\n}\n\nh1, h2, h3 {\n  color: var(--text-primary);\n  font-weight: 500;\n}\n\nh1 {\n  text-align: center;\n  margin-bottom: 30px;\n  font-size: 2rem;\n  background: linear-gradient(90deg, var(--primary-color), #03a9f4);\n  -webkit-background-clip: text;\n  background-clip: text;\n  color: transparent;\n  text-shadow: 0 2px 10px rgba(126, 87, 194, 0.2);\n}\n\nh2 {\n  font-size: 1.5rem;\n  margin-top: 0;\n  padding-bottom: 15px;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.card {\n  background-color: var(--card-color);\n  border-radius: 12px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n  margin-bottom: 20px; /* Reduced from 25px to 20px */\n  padding: 20px; /* Reduced from 25px to 20px */\n  transition: transform 0.2s, box-shadow 0.2s;\n  overflow: visible;\n}\n\n.card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);\n}\n\n.form-group {\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.form-group label {\n  width: 200px;\n  font-weight: 500;\n  color: var(--text-primary);\n  margin-right: 15px;\n}\n\n.input-field {\n  padding: 10px 15px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  width: 100px;\n  margin-right: 15px;\n  background-color: #383838;\n  color: var(--text-primary);\n  font-family: 'JetBrains Mono', monospace;\n  transition: border-color 0.3s, box-shadow 0.3s;\n}\n\n.input-field:focus {\n  border-color: var(--primary-color);\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(126, 87, 194, 0.2);\n}\n\n.btn {\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  padding: 10px 18px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.3s;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.btn:hover {\n  background-color: var(--primary-hover);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.25);\n}\n\n.btn:active {\n  transform: translateY(0);\n}\n\n.btn:disabled {\n  background-color: #555555;\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n.btn.primary {\n  background-color: var(--primary-color);\n}\n\n.btn.primary:hover {\n  background-color: var(--primary-hover);\n}\n\n.btn.secondary {\n  background-color: var(--secondary-color);\n}\n\n.btn.secondary:hover {\n  background-color: var(--secondary-hover);\n}\n\n.protocol-steps {\n  margin-top: 10px; /* Added to reduce space */\n}\n\n.protocol-steps .btn.step-btn {\n  margin: 12px auto; /* Reduced from 20px to 12px */\n  padding: 10px 20px; /* Reduced from 12px 24px to 10px 20px */\n}\n\n.icon {\n  margin-right: 8px;\n  font-style: normal;\n}\n\n.values-display {\n  background-color: rgba(0, 0, 0, 0.2);\n  padding: 20px;\n  border-radius: 8px;\n  margin-top: 25px;\n  border: 1px solid var(--border-color);\n}\n\n.values-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n\n@media (max-width: 768px) {\n  .values-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n.values-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.secret-values, .public-values {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 15px;\n}\n\n.value-item {\n  background-color: rgba(255, 255, 255, 0.05);\n  padding: 10px 15px;\n  border-radius: 6px;\n  font-family: 'JetBrains Mono', monospace;\n  font-size: 15px;\n  border: 1px solid var(--border-color);\n  transition: background-color 0.2s;\n}\n\n.value-item:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.protocol-visualization {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 20px 0; /* Reduced from 35px to 20px */\n  position: relative;\n  min-height: 200px; /* Reduced from 280px to 200px */\n  padding-top: 100px; /* Reduced from 140px to 100px */\n  overflow: visible;\n}\n\n.character {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 150px;\n  position: relative;\n  margin-top: 80px; /* Reduced from 120px to 80px */\n}\n\n.avatar {\n  width: 70px; /* Reduced from 90px to 70px */\n  height: 70px; /* Reduced from 90px to 70px */\n  border-radius: 50%;\n  overflow: hidden;\n  border: 3px solid var(--border-color);\n  background-color: #333333;\n  transition: all 0.3s;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  filter: brightness(0.9);\n}\n\n.character.active .avatar {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 15px rgba(126, 87, 194, 0.5);\n}\n\n.character-name {\n  margin-top: 12px;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.thought-bubble {\n  position: absolute;\n  top: -110px; /* Adjusted from -130px to -110px */\n  background-color: #383838;\n  border: 1px solid var(--border-color);\n  border-radius: 10px;\n  padding: 12px; /* Reduced from 15px to 12px */\n  width: 220px; /* Reduced from 250px to 220px */\n  min-height: 80px; /* Reduced from 90px to 80px */\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  font-size: 14px;\n  color: var(--text-primary);\n  z-index: 10;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.thought-bubble:after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #383838;\n}\n\n.protocol-messages {\n  flex-grow: 1;\n  padding: 0 20px; /* Reduced from 30px to 20px */\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px; /* Reduced from 20px to 12px */\n}\n\n.message {\n  display: flex;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.05);\n  padding: 12px 15px; /* Reduced from 15px 20px to 12px 15px */\n  border-radius: 8px;\n  position: relative;\n  border: 1px solid var(--border-color);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n}\n\n.message:hover {\n  transform: translateY(-2px);\n}\n\n.message .content {\n  width: 100%;\n  color: var(--text-primary);\n}\n\n.arrow {\n  position: absolute;\n  width: 40px;\n  height: 2px;\n  background-color: var(--primary-color);\n}\n\n.arrow.right {\n  left: -40px;\n}\n\n.arrow.right:after {\n  content: '';\n  position: absolute;\n  right: 0;\n  top: -4px;\n  border-left: 8px solid var(--primary-color);\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.arrow.left {\n  right: -40px;\n}\n\n.arrow.left:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: -4px;\n  border-right: 8px solid var(--primary-color);\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.arrow.none {\n  display: none;\n}\n\n.verification {\n  padding: 15px;\n  border-radius: 6px;\n}\n\n.verification-icon {\n  font-size: 18px;\n  margin-right: 8px;\n}\n\n.verification.success {\n  background-color: rgba(102, 187, 106, 0.1);\n  border-left: 4px solid var(--success-color);\n}\n\n.verification.failure {\n  background-color: rgba(239, 83, 80, 0.1);\n  border-left: 4px solid var(--error-color);\n}\n\n.verification-equation {\n  font-family: 'JetBrains Mono', monospace;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.protocol-controls {\n  display: flex;\n  gap: 15px;\n  margin-top: 20px;\n  flex-wrap: wrap;\n}\n\n.rounds-history {\n  margin-top: 40px;\n  padding-top: 30px;\n  border-top: 1px solid var(--border-color);\n}\n\n.rounds-table {\n  overflow-x: auto;\n  border-radius: 8px;\n  border: 1px solid var(--border-color);\n  margin-top: 15px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 14px;\n}\n\nth, td {\n  border: 1px solid var(--border-color);\n  padding: 12px 15px;\n  text-align: center;\n}\n\nth {\n  background-color: rgba(0, 0, 0, 0.3);\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\ntr:nth-child(even) {\n  background-color: rgba(255, 255, 255, 0.03);\n}\n\ntr:hover {\n  background-color: rgba(255, 255, 255, 0.05);\n}\n\ntd.success {\n  color: var(--success-color);\n  font-weight: 500;\n}\n\ntd.failure {\n  color: var(--error-color);\n  font-weight: 500;\n}\n\n.result-icon {\n  font-size: 16px;\n}\n\n.security-info {\n  margin-top: 25px;\n  padding: 20px;\n  background-color: rgba(3, 169, 244, 0.1);\n  border-radius: 8px;\n  border: 1px solid rgba(3, 169, 244, 0.3);\n}\n\n.explanation {\n  margin-top: 40px;\n  background-color: var(--card-color);\n}\n\n.explanation-content {\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 25px;\n}\n\n@media (max-width: 768px) {\n  .content-container {\n    width: 100%;\n    padding: 0 10px;\n  }\n  \n  .values-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .explanation-content {\n    grid-template-columns: 1fr;\n  }\n}\n\n.explanation-section {\n  padding-bottom: 20px;\n}\n\n.explanation h3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: var(--primary-color);\n  font-size: 1.2rem;\n}\n\n.explanation ol {\n  padding-left: 25px;\n  margin: 15px 0;\n}\n\n.explanation li {\n  margin-bottom: 10px;\n}\n\n/* Add fixed positioning for verification thought bubbles */\n.character .thought-bubble.verification-thought {\n  min-width: 250px;\n  width: auto;\n}\n\n/* Ensure thought bubbles don't get cut off at the edges */\n.protocol-section {\n  padding-top: 20px;\n  position: relative;\n  overflow: visible;\n}\n\n/* Create a responsive container for the protocol sections */\n@media (min-width: 1400px) {\n  .content-container {\n    max-width: 80%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}